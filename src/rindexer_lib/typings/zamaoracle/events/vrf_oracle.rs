#![allow(
    non_camel_case_types,
    clippy::enum_variant_names,
    clippy::too_many_arguments,
    clippy::upper_case_acronyms,
    clippy::type_complexity,
    dead_code
)]
use super::super::super::super::typings::database::get_or_init_postgres_client;
use super::super::super::super::typings::networks::get_provider_cache_for_network;
/// THIS IS A GENERATED FILE. DO NOT MODIFY MANUALLY.
///
/// This file was auto generated by rindexer - https://github.com/joshstevens19/rindexer.
/// Any manual changes to this file will be overwritten.
use super::vrf_oracle_abi_gen::RindexerVRFOracleGen::{
    self, RindexerVRFOracleGenEvents, RindexerVRFOracleGenInstance,
};
use alloy::network::AnyNetwork;
use alloy::primitives::{Address, Bytes, B256};
use alloy::sol_types::{SolEvent, SolEventInterface, SolType};
use rindexer::{
    async_trait,
    event::{
        callback_registry::{
            EventCallbackRegistry, EventCallbackRegistryInformation, EventCallbackResult,
            EventResult, HasTxInformation, TxInformation,
        },
        contract_setup::{ContractInformation, NetworkContract},
    },
    generate_random_id,
    manifest::{
        contract::{Contract, ContractDetails},
        yaml::read_manifest,
    },
    provider::{JsonRpcCachedProvider, RindexerProvider},
    AsyncCsvAppender, FutureExt, PostgresClient,
};
use std::collections::HashMap;
use std::error::Error;
use std::future::Future;
use std::path::{Path, PathBuf};
use std::pin::Pin;
use std::{any::Any, sync::Arc};

pub type RandomnessFulfilledData = RindexerVRFOracleGen::RandomnessFulfilled;

#[derive(Debug, Clone)]
pub struct RandomnessFulfilledResult {
    pub event_data: RandomnessFulfilledData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for RandomnessFulfilledResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type RandomnessRequestedData = RindexerVRFOracleGen::RandomnessRequested;

#[derive(Debug, Clone)]
pub struct RandomnessRequestedResult {
    pub event_data: RandomnessRequestedData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for RandomnessRequestedResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type logData = RindexerVRFOracleGen::log;

#[derive(Debug, Clone)]
pub struct logResult {
    pub event_data: logData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for logResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_addressData = RindexerVRFOracleGen::log_address;

#[derive(Debug, Clone)]
pub struct log_addressResult {
    pub event_data: log_addressData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_addressResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_arrayData = RindexerVRFOracleGen::log_array_0;

#[derive(Debug, Clone)]
pub struct log_arrayResult {
    pub event_data: log_arrayData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_arrayResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_bytesData = RindexerVRFOracleGen::log_bytes;

#[derive(Debug, Clone)]
pub struct log_bytesResult {
    pub event_data: log_bytesData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_bytesResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_bytes32Data = RindexerVRFOracleGen::log_bytes32;

#[derive(Debug, Clone)]
pub struct log_bytes32Result {
    pub event_data: log_bytes32Data,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_bytes32Result {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_intData = RindexerVRFOracleGen::log_int;

#[derive(Debug, Clone)]
pub struct log_intResult {
    pub event_data: log_intData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_intResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_named_addressData = RindexerVRFOracleGen::log_named_address;

#[derive(Debug, Clone)]
pub struct log_named_addressResult {
    pub event_data: log_named_addressData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_named_addressResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_named_arrayData = RindexerVRFOracleGen::log_named_array_0;

#[derive(Debug, Clone)]
pub struct log_named_arrayResult {
    pub event_data: log_named_arrayData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_named_arrayResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_named_bytesData = RindexerVRFOracleGen::log_named_bytes;

#[derive(Debug, Clone)]
pub struct log_named_bytesResult {
    pub event_data: log_named_bytesData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_named_bytesResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_named_bytes32Data = RindexerVRFOracleGen::log_named_bytes32;

#[derive(Debug, Clone)]
pub struct log_named_bytes32Result {
    pub event_data: log_named_bytes32Data,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_named_bytes32Result {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_named_decimal_intData = RindexerVRFOracleGen::log_named_decimal_int;

#[derive(Debug, Clone)]
pub struct log_named_decimal_intResult {
    pub event_data: log_named_decimal_intData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_named_decimal_intResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_named_decimal_uintData = RindexerVRFOracleGen::log_named_decimal_uint;

#[derive(Debug, Clone)]
pub struct log_named_decimal_uintResult {
    pub event_data: log_named_decimal_uintData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_named_decimal_uintResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_named_intData = RindexerVRFOracleGen::log_named_int;

#[derive(Debug, Clone)]
pub struct log_named_intResult {
    pub event_data: log_named_intData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_named_intResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_named_stringData = RindexerVRFOracleGen::log_named_string;

#[derive(Debug, Clone)]
pub struct log_named_stringResult {
    pub event_data: log_named_stringData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_named_stringResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_named_uintData = RindexerVRFOracleGen::log_named_uint;

#[derive(Debug, Clone)]
pub struct log_named_uintResult {
    pub event_data: log_named_uintData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_named_uintResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_stringData = RindexerVRFOracleGen::log_string;

#[derive(Debug, Clone)]
pub struct log_stringResult {
    pub event_data: log_stringData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_stringResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type log_uintData = RindexerVRFOracleGen::log_uint;

#[derive(Debug, Clone)]
pub struct log_uintResult {
    pub event_data: log_uintData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for log_uintResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

pub type logsData = RindexerVRFOracleGen::logs;

#[derive(Debug, Clone)]
pub struct logsResult {
    pub event_data: logsData,
    pub tx_information: TxInformation,
}

impl HasTxInformation for logsResult {
    fn tx_information(&self) -> &TxInformation {
        &self.tx_information
    }
}

type BoxFuture<'a, T> = Pin<Box<dyn Future<Output = T> + Send + 'a>>;

#[async_trait]
trait EventCallback {
    async fn call(&self, events: Vec<EventResult>) -> EventCallbackResult<()>;
}

pub struct EventContext<TExtensions>
where
    TExtensions: Send + Sync,
{
    pub database: Arc<PostgresClient>,
    pub csv: Arc<AsyncCsvAppender>,
    pub extensions: Arc<TExtensions>,
}

// didn't want to use option or none made harder DX
// so a blank struct makes interface nice
pub struct NoExtensions {}
pub const fn no_extensions() -> NoExtensions {
    NoExtensions {}
}

pub fn randomnessfulfilled_handler<TExtensions, F, Fut>(
    custom_logic: F,
) -> RandomnessFulfilledEventCallbackType<TExtensions>
where
    RandomnessFulfilledResult: Clone + 'static,
    F: for<'a> Fn(Vec<RandomnessFulfilledResult>, Arc<EventContext<TExtensions>>) -> Fut
        + Send
        + Sync
        + 'static
        + Clone,
    Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    TExtensions: Send + Sync + 'static,
{
    Arc::new(move |results, context| {
        let custom_logic = custom_logic.clone();
        let results = results.clone();
        let context = Arc::clone(&context);
        async move { (custom_logic)(results, context).await }.boxed()
    })
}

type RandomnessFulfilledEventCallbackType<TExtensions> = Arc<
    dyn for<'a> Fn(
            &'a Vec<RandomnessFulfilledResult>,
            Arc<EventContext<TExtensions>>,
        ) -> BoxFuture<'a, EventCallbackResult<()>>
        + Send
        + Sync,
>;

pub struct RandomnessFulfilledEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    callback: RandomnessFulfilledEventCallbackType<TExtensions>,
    context: Arc<EventContext<TExtensions>>,
}

impl<TExtensions> RandomnessFulfilledEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    pub async fn handler<F, Fut>(closure: F, extensions: TExtensions) -> Self
    where
        RandomnessFulfilledResult: Clone + 'static,
        F: for<'a> Fn(Vec<RandomnessFulfilledResult>, Arc<EventContext<TExtensions>>) -> Fut
            + Send
            + Sync
            + 'static
            + Clone,
        Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    {
        let csv = AsyncCsvAppender::new(
            r"/Users/msaug/workspace/zamaoracle/generated_csv/VRFOracle/vrforacle-randomnessfulfilled.csv",
        );
        if !Path::new(r"/Users/msaug/workspace/zamaoracle/generated_csv/VRFOracle/vrforacle-randomnessfulfilled.csv").exists() {
            csv.append_header(vec!["contract_address".into(), "request_id".into(), "randomness".into(), "tx_hash".into(), "block_number".into(), "block_hash".into(), "network".into(), "tx_index".into(), "log_index".into()])
                .await
                .expect("Failed to write CSV header");
        }

        Self {
            callback: randomnessfulfilled_handler(closure),
            context: Arc::new(EventContext {
                database: get_or_init_postgres_client().await,
                csv: Arc::new(csv),
                extensions: Arc::new(extensions),
            }),
        }
    }
}

#[async_trait]
impl<TExtensions> EventCallback for RandomnessFulfilledEvent<TExtensions>
where
    TExtensions: Send + Sync,
{
    async fn call(&self, events: Vec<EventResult>) -> EventCallbackResult<()> {
        let events_len = events.len();

        // note some can not downcast because it cant decode
        // this happens on events which failed decoding due to
        // not having the right abi for example
        // transfer events with 2 indexed topics cant decode
        // transfer events with 3 indexed topics
        let result: Vec<RandomnessFulfilledResult> = events
            .into_iter()
            .filter_map(|item| {
                item.decoded_data
                    .downcast::<RandomnessFulfilledData>()
                    .ok()
                    .map(|arc| RandomnessFulfilledResult {
                        event_data: (*arc).clone(),
                        tx_information: item.tx_information,
                    })
            })
            .collect();

        if result.len() == events_len {
            (self.callback)(&result, Arc::clone(&self.context)).await
        } else {
            panic!("RandomnessFulfilledEvent: Unexpected data type - expected: RandomnessFulfilledData")
        }
    }
}

pub fn randomnessrequested_handler<TExtensions, F, Fut>(
    custom_logic: F,
) -> RandomnessRequestedEventCallbackType<TExtensions>
where
    RandomnessRequestedResult: Clone + 'static,
    F: for<'a> Fn(Vec<RandomnessRequestedResult>, Arc<EventContext<TExtensions>>) -> Fut
        + Send
        + Sync
        + 'static
        + Clone,
    Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    TExtensions: Send + Sync + 'static,
{
    Arc::new(move |results, context| {
        let custom_logic = custom_logic.clone();
        let results = results.clone();
        let context = Arc::clone(&context);
        async move { (custom_logic)(results, context).await }.boxed()
    })
}

type RandomnessRequestedEventCallbackType<TExtensions> = Arc<
    dyn for<'a> Fn(
            &'a Vec<RandomnessRequestedResult>,
            Arc<EventContext<TExtensions>>,
        ) -> BoxFuture<'a, EventCallbackResult<()>>
        + Send
        + Sync,
>;

pub struct RandomnessRequestedEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    callback: RandomnessRequestedEventCallbackType<TExtensions>,
    context: Arc<EventContext<TExtensions>>,
}

impl<TExtensions> RandomnessRequestedEvent<TExtensions>
where
    TExtensions: Send + Sync + 'static,
{
    pub async fn handler<F, Fut>(closure: F, extensions: TExtensions) -> Self
    where
        RandomnessRequestedResult: Clone + 'static,
        F: for<'a> Fn(Vec<RandomnessRequestedResult>, Arc<EventContext<TExtensions>>) -> Fut
            + Send
            + Sync
            + 'static
            + Clone,
        Fut: Future<Output = EventCallbackResult<()>> + Send + 'static,
    {
        let csv = AsyncCsvAppender::new(
            r"/Users/msaug/workspace/zamaoracle/generated_csv/VRFOracle/vrforacle-randomnessrequested.csv",
        );
        if !Path::new(r"/Users/msaug/workspace/zamaoracle/generated_csv/VRFOracle/vrforacle-randomnessrequested.csv").exists() {
            csv.append_header(vec!["contract_address".into(), "request_id".into(), "requester".into(), "paid".into(), "tx_hash".into(), "block_number".into(), "block_hash".into(), "network".into(), "tx_index".into(), "log_index".into()])
                .await
                .expect("Failed to write CSV header");
        }

        Self {
            callback: randomnessrequested_handler(closure),
            context: Arc::new(EventContext {
                database: get_or_init_postgres_client().await,
                csv: Arc::new(csv),
                extensions: Arc::new(extensions),
            }),
        }
    }
}

#[async_trait]
impl<TExtensions> EventCallback for RandomnessRequestedEvent<TExtensions>
where
    TExtensions: Send + Sync,
{
    async fn call(&self, events: Vec<EventResult>) -> EventCallbackResult<()> {
        let events_len = events.len();

        // note some can not downcast because it cant decode
        // this happens on events which failed decoding due to
        // not having the right abi for example
        // transfer events with 2 indexed topics cant decode
        // transfer events with 3 indexed topics
        let result: Vec<RandomnessRequestedResult> = events
            .into_iter()
            .filter_map(|item| {
                item.decoded_data
                    .downcast::<RandomnessRequestedData>()
                    .ok()
                    .map(|arc| RandomnessRequestedResult {
                        event_data: (*arc).clone(),
                        tx_information: item.tx_information,
                    })
            })
            .collect();

        if result.len() == events_len {
            (self.callback)(&result, Arc::clone(&self.context)).await
        } else {
            panic!("RandomnessRequestedEvent: Unexpected data type - expected: RandomnessRequestedData")
        }
    }
}

pub enum VRFOracleEventType<TExtensions>
where
    TExtensions: 'static + Send + Sync,
{
    RandomnessFulfilled(RandomnessFulfilledEvent<TExtensions>),
    RandomnessRequested(RandomnessRequestedEvent<TExtensions>),
}

pub async fn vrf_oracle_contract(
    network: &str,
) -> RindexerVRFOracleGenInstance<Arc<RindexerProvider>, AnyNetwork> {
    let address: Address = "0x68b1d87f95878fe05b998f19b66f4baba5de1aed"
        .parse()
        .expect("Invalid address");
    RindexerVRFOracleGen::new(
        address,
        get_provider_cache_for_network(network)
            .await
            .get_inner_provider(),
    )
}

pub async fn decoder_contract(
    network: &str,
) -> RindexerVRFOracleGenInstance<Arc<RindexerProvider>, AnyNetwork> {
    if network == "anvil" {
        RindexerVRFOracleGen::new(
            // do not care about address here its decoding makes it easier to handle ValueOrArray
            Address::ZERO,
            get_provider_cache_for_network(network)
                .await
                .get_inner_provider(),
        )
    } else {
        panic!("Network not supported");
    }
}

impl<TExtensions> VRFOracleEventType<TExtensions>
where
    TExtensions: 'static + Send + Sync,
{
    pub const fn topic_id(&self) -> &'static str {
        match self {
            Self::RandomnessFulfilled(_) => {
                "0x9b0aa3f92f46e24caa76b000bdf0dd495b9b390c320cf6585ae10a12b7d09edb"
            }
            Self::RandomnessRequested(_) => {
                "0x13a60f6af7fd1913f4427827f2b8eaf744db539a81bacd3c7e42746110046d80"
            }
        }
    }

    pub const fn event_name(&self) -> &'static str {
        match self {
            Self::RandomnessFulfilled(_) => "RandomnessFulfilled",
            Self::RandomnessRequested(_) => "RandomnessRequested",
        }
    }

    pub fn contract_name(&self) -> String {
        "VRFOracle".to_string()
    }

    async fn get_provider(&self, network: &str) -> Arc<JsonRpcCachedProvider> {
        get_provider_cache_for_network(network).await
    }

    fn decoder(
        &self,
        network: &str,
    ) -> Arc<dyn Fn(Vec<B256>, Bytes) -> Arc<dyn Any + Send + Sync> + Send + Sync> {
        let decoder_contract = decoder_contract(network);

        match self {
            Self::RandomnessFulfilled(_) => Arc::new(move |topics: Vec<B256>, data: Bytes| {
                match RandomnessFulfilledData::decode_raw_log(topics, &data[0..]) {
                    Ok(event) => {
                        let result: RandomnessFulfilledData = event;
                        Arc::new(result) as Arc<dyn Any + Send + Sync>
                    }
                    Err(error) => Arc::new(error) as Arc<dyn Any + Send + Sync>,
                }
            }),

            Self::RandomnessRequested(_) => Arc::new(move |topics: Vec<B256>, data: Bytes| {
                match RandomnessRequestedData::decode_raw_log(topics, &data[0..]) {
                    Ok(event) => {
                        let result: RandomnessRequestedData = event;
                        Arc::new(result) as Arc<dyn Any + Send + Sync>
                    }
                    Err(error) => Arc::new(error) as Arc<dyn Any + Send + Sync>,
                }
            }),
        }
    }

    pub async fn register(self, manifest_path: &PathBuf, registry: &mut EventCallbackRegistry) {
        let rindexer_yaml = read_manifest(manifest_path).expect("Failed to read rindexer.yaml");
        let topic_id = self.topic_id();
        let contract_name = self.contract_name();
        let event_name = self.event_name();

        let contract_details = rindexer_yaml
            .all_contracts()
            .iter()
            .find(|c| c.name == contract_name)
            .unwrap_or_else(|| {
                panic!(
                    "Contract {contract_name} not found please make sure its defined in the rindexer.yaml"
                )
            })
            .clone();

        let index_event_in_order = contract_details
            .index_event_in_order
            .as_ref()
            .is_some_and(|vec| vec.contains(&event_name.to_string()));

        // Expect providers to have been initialized, but it's an async init so this should
        // be fast but for correctness we must await each future.
        let mut providers = HashMap::new();
        for n in contract_details.details.iter() {
            let provider = self.get_provider(&n.network).await;
            providers.insert(n.network.clone(), provider);
        }

        let contract = ContractInformation {
            name: contract_details
                .before_modify_name_if_filter_readonly()
                .into_owned(),
            details: contract_details
                .details
                .iter()
                .map(|c| NetworkContract {
                    id: generate_random_id(10),
                    network: c.network.clone(),
                    cached_provider: providers
                        .get(&c.network)
                        .expect("must have a provider")
                        .clone(),
                    decoder: self.decoder(&c.network),
                    indexing_contract_setup: c.indexing_contract_setup(manifest_path),
                    start_block: c.start_block,
                    end_block: c.end_block,
                    disable_logs_bloom_checks: rindexer_yaml
                        .networks
                        .iter()
                        .find(|n| n.name == c.network)
                        .is_some_and(|n| n.disable_logs_bloom_checks.unwrap_or_default()),
                })
                .collect(),
            abi: contract_details.abi,
            reorg_safe_distance: contract_details.reorg_safe_distance.unwrap_or_default(),
        };

        let callback: Arc<
            dyn Fn(Vec<EventResult>) -> BoxFuture<'static, EventCallbackResult<()>> + Send + Sync,
        > = match self {
            Self::RandomnessFulfilled(event) => {
                let event = Arc::new(event);
                Arc::new(move |result| {
                    let event = Arc::clone(&event);
                    async move { event.call(result).await }.boxed()
                })
            }

            Self::RandomnessRequested(event) => {
                let event = Arc::new(event);
                Arc::new(move |result| {
                    let event = Arc::clone(&event);
                    async move { event.call(result).await }.boxed()
                })
            }
        };

        registry.register_event(EventCallbackRegistryInformation {
            id: generate_random_id(10),
            indexer_name: "zamaoracle".to_string(),
            event_name: event_name.to_string(),
            index_event_in_order,
            topic_id: topic_id.parse::<B256>().unwrap(),
            contract,
            callback,
        });
    }
}
